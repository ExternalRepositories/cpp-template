name: Sanitizer

on:
  push:
  pull_request:
  schedule:
    - cron: "0 0 1 * *"

jobs:
  ubuntu-address-undefined:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        compiler: [g++-10, clang++-10]

    steps:
      - uses: actions/checkout@v2

      - name: Install
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
          sudo apt update
          sudo apt install g++-10 llvm
          wget https://github.com/google/googletest/archive/release-1.10.0.zip
          unzip release-1.10.0.zip
          cd googletest-release-1.10.0
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_GMOCK=OFF \
          -DBUILD_SHARED_LIBS=ON -Dgtest_build_tests=OFF
          cmake --build build --config Release -j$(nproc)
          sudo cmake --build build --config Release --target install
        env:
          CC: /usr/bin/gcc-10
          CXX: /usr/bin/g++-10

      - name: Configure
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo -DSANITIZER="Address;Undefined"
        env:
          CXX: ${{ matrix.compiler }}

      - name: Build
        run: cmake --build build --config RelWithDebInfo -j$(nproc)

      - name: Test
        run: cd build ; ctest -C RelWithDebInfo -j$(nproc) --output-on-failure
        env:
          UBSAN_OPTIONS: print_stacktrace=1

  ubuntu-thread:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Install
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
          sudo apt update
          sudo apt install g++-10
          wget https://github.com/llvm/llvm-project/archive/llvmorg-10.0.1.zip
          unzip llvmorg-10.0.1.zip
          cd llvm-project-llvmorg-10.0.1
          cmake -S llvm -B build -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi" \
          -DLLVM_USE_SANITIZER=Thread
          cmake --build build --config Release -j$(nproc)
          sudo cmake --build build --config Release --target install
          wget https://github.com/google/googletest/archive/release-1.10.0.zip
          unzip release-1.10.0.zip
          cd googletest-release-1.10.0
          TSAN_CFLAGS="-fsanitize=thread -stdlib=libc++"
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_GMOCK=OFF \
          -DBUILD_SHARED_LIBS=ON -Dgtest_build_tests=OFF \
          -DCMAKE_C_FLAGS="$TSAN_CFLAGS" -DCMAKE_CXX_FLAGS="$TSAN_CFLAGS"
          cmake --build build --config Release -j$(nproc)
          sudo cmake --build build --config Release --target install
        env:
          CC: /usr/bin/clang-10
          CXX: /usr/bin/clang++-10

      - name: Configure
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo -DSANITIZER=Thread
        env:
          CXX: /usr/bin/clang++-10

      - name: Build
        run: cmake --build build --config RelWithDebInfo -j$(nproc)

      - name: Test
        run: cd build ; ctest -C RelWithDebInfo -j$(nproc) --output-on-failure

  ubuntu-memory:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Install
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
          sudo apt update
          sudo apt install g++-10 llvm
          wget https://github.com/llvm/llvm-project/archive/llvmorg-10.0.1.zip
          unzip llvmorg-10.0.1.zip
          cd llvm-project-llvmorg-10.0.1
          cmake -S llvm -B build -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi" \
          -DLLVM_USE_SANITIZER=MemoryWithOrigins
          cmake --build build --config Release -j$(nproc)
          sudo cmake --build build --config Release --target install
          wget https://github.com/google/googletest/archive/release-1.10.0.zip
          unzip release-1.10.0.zip
          cd googletest-release-1.10.0
          MSAN_CFLAGS="-fsanitize=memory -fsanitize-memory-track-origins -fno-omit-frame-pointer -stdlib=libc++"
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_GMOCK=OFF \
          -DBUILD_SHARED_LIBS=ON -Dgtest_build_tests=OFF \
          -DCMAKE_C_FLAGS="$MSAN_CFLAGS" -DCMAKE_CXX_FLAGS="$MSAN_CFLAGS"
          cmake --build build --config Release -j$(nproc)
          sudo cmake --build build --config Release --target install
        env:
          CC: /usr/bin/clang-10
          CXX: /usr/bin/clang++-10

      - name: Configure
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo -DSANITIZER=Memory
        env:
          CXX: /usr/bin/clang++-10

      - name: Build
        run: cmake --build build --config RelWithDebInfo -j$(nproc)

      - name: Test
        run: cd build ; ctest -C RelWithDebInfo -j$(nproc) --output-on-failure

  macos-address-undefined:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install
        run: |
          ln -s "$(brew --prefix llvm)/bin/llvm-symbolizer" "/usr/local/bin/llvm-symbolizer"
          wget https://github.com/google/googletest/archive/release-1.10.0.zip
          unzip release-1.10.0.zip
          cd googletest-release-1.10.0
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_GMOCK=OFF \
          -DBUILD_SHARED_LIBS=ON -Dgtest_build_tests=OFF
          cmake --build build --config Release -j`sysctl -n hw.ncpu`
          sudo cmake --build build --config Release --target install

      - name: Configure
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo -DSANITIZER="Address;Undefined"

      - name: Build
        run: cmake --build build --config RelWithDebInfo -j`sysctl -n hw.ncpu`
        env:
          C_INCLUDE_PATH: /usr/local/include
          CPLUS_INCLUDE_PATH: /usr/local/include

      - name: Test
        run: cd build ; ctest -C RelWithDebInfo -j`sysctl -n hw.ncpu` --output-on-failure
        env:
          UBSAN_OPTIONS: print_stacktrace=1
        # FIXME
        # ASAN_OPTIONS: detect_leaks=1
