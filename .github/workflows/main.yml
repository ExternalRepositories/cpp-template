name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    container: archlinux

    steps:
    - uses: actions/checkout@v2

    - name: install
      run: |
        pacman -Syu --noconfirm
        pacman -S --noconfirm base-devel cmake wget unzip git \
        intel-tbb boost fmt nlohmann-json gtest
        wget https://github.com/Neargye/magic_enum/archive/v0.6.5.zip
        unzip v0.6.5.zip
        cd magic_enum-0.6.5
        mkdir build && cd build && cmake ..
        make -j4
        make install
        git clone https://github.com/linux-test-project/lcov
        cd lcov
        make install
        wget http://search.cpan.org/CPAN/authors/id/N/NW/NWCLARK/PerlIO-gzip-0.20.tar.gz
        tar -xzvf PerlIO-gzip-0.20.tar.gz
        cd PerlIO-gzip-0.20
        perl Makefile.PL
        make && make install
        wget http://www.cpan.org/authors/id/M/MA/MAKAMAKA/JSON-2.90.tar.gz
        tar -xzvf JSON-2.90.tar.gz
        cd JSON-2.90
        perl Makefile.PL
        make && make install

    - name: configure
      run: mkdir build && cd build && cmake ..

    - name: coverage
      run: cd build && make coverage

    - name: build
      run: cd build && make -j4

    - name: test
      run: cd build && make test

    - name: coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: build/coverage.info

  release:

    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    container: archlinux
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url
    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  publish:

    if: contains(github.ref, 'tags/v')
    name: ArchLinux Latest GCC
    runs-on: ubuntu-latest
    container: archlinux
    strategy:
      fail-fast: false
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ matrix.config.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url
    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ matrix.config.artifact }}
        asset_name: ${{ matrix.config.artifact }}
        asset_content_type: application/x-gtar
