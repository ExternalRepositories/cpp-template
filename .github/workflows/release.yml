name: Release

on:
  release:
    types: published

jobs:
  ubuntu:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        config:
          - { cc: "gcc-10", cxx: "g++-10" }
          - { cc: "clang-10", cxx: "clang++-10" }

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
          sudo apt update
          sudo apt install gcc-10 g++-10

      - name: Set env
        run: echo ::set-env name=RELEASE_VERSION::${TAG_NAME:1}
        env:
          TAG_NAME: ${{ github.event.release.tag_name }}

      - name: Configure
        run: cmake -S . -B build
        env:
          CC: gcc-10
          CXX: g++-10

      - name: Build
        run: cmake --build build --config Release -j$(nproc)

      - name: CPack
        run: cd build ; cpack

      - name: Install
        run: sudo dpkg -i build/klib-${{ env.RELEASE_VERSION }}-Linux.deb

      - name: Run executable
        run: executable

      - name: Build examples
        run: |
          cd examples
          cmake -S . -B build
          cmake --build build --config Release -j$(nproc)
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}

      - name: Upload release asset(zip)
        if: ${{ matrix.config.cxx == 'g++-10' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/klib-${{ env.RELEASE_VERSION }}-Linux.zip
          asset_name: klib-${{ env.RELEASE_VERSION }}-Linux.zip
          asset_content_type: application/zip

      - name: Upload release asset(deb)
        if: ${{ matrix.config.cxx == 'g++-10' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/klib-${{ env.RELEASE_VERSION }}-Linux.deb
          asset_name: klib-${{ env.RELEASE_VERSION }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

  macos:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set env
        run: echo ::set-env name=RELEASE_VERSION::${TAG_NAME:1}
        env:
          TAG_NAME: ${{ github.event.release.tag_name }}

      - name: Configure
        run: cmake -S . -B build

      - name: Build
        run: cmake --build build --config Release -j`sysctl -n hw.ncpu`
        env:
          C_INCLUDE_PATH: /usr/local/include
          CPLUS_INCLUDE_PATH: /usr/local/include

      - name: CPack
        run: cd build ; cpack

      # FIXME Packaging configuration error. Modify TheCPack.cmake
      # - name: Install
      #   run: sudo installer -pkg build/klib-${{ env.RELEASE_VERSION }}-Darwin.pkg -target /

      # - name: Run executable
      #   run: executable

      # - name: Build examples
      #   run: |
      #     cd examples
      #     cmake -S . -B build
      #     cmake --build build --config Release -j`sysctl -n hw.ncpu`
      #   env:
      #     C_INCLUDE_PATH: /usr/local/include
      #     CPLUS_INCLUDE_PATH: /usr/local/include

      - name: Upload release asset(zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/klib-${{ env.RELEASE_VERSION }}-Darwin.zip
          asset_name: klib-${{ env.RELEASE_VERSION }}-Darwin.zip
          asset_content_type: application/zip

      - name: Upload release asset(pkg)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/klib-${{ env.RELEASE_VERSION }}-Darwin.pkg
          asset_name: klib-${{ env.RELEASE_VERSION }}-Darwin.pkg
          asset_content_type: application/x-newton-compatible-pkg
