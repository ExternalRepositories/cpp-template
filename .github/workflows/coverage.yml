name: Coverage

on:
  push:
  pull_request:
  schedule:
    - cron: "0 0 1 * *"

jobs:
  linux:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        config:
          - { cc: "gcc-10", cxx: "g++-10" }
          - { cc: "clang-10", cxx: "clang++-10" }

    steps:
      - uses: actions/checkout@v2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: dependencies
          key: ${{ runner.os }}-dependencies-20201006-2

      - name: Build and install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: sudo bash ./scripts/build-install.sh

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit == 'true'
        run: sudo bash ./scripts/install.sh

      - name: Configure
        run: |
          cmake -S . -B build -DKLIB_BUILD_TESTS=ON -DKLIB_BUILD_COVERAGE=ON \
          -DCMAKE_BUILD_TYPE=Debug
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}

      - name: Build
        run: cmake --build build --config Debug -j$(nproc) --target coverage

      - name: Coveralls
        if: ${{ matrix.config.cxx == 'g++-10' }}
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: build/lcov.info

      - name: Upload artifact
        if: ${{ matrix.config.cxx == 'clang++-10' }}
        uses: actions/upload-artifact@v2
        with:
          name: coverage-linux-clang
          path: build/coverage
          if-no-files-found: error

  macos:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: dependencies
          key: ${{ runner.os }}-dependencies-20201006-2

      - name: Build and install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: sudo bash ./scripts/build-install.sh

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit == 'true'
        run: sudo bash ./scripts/install.sh

      - name: Configure
        run: |
          cmake -S . -B build -DKLIB_BUILD_TESTS=ON -DKLIB_BUILD_COVERAGE=ON \
          -DCMAKE_BUILD_TYPE=Debug

      - name: Build
        run: cmake --build build --config Debug -j`sysctl -n hw.ncpu` --target coverage
        env:
          C_INCLUDE_PATH: /usr/local/include
          CPLUS_INCLUDE_PATH: /usr/local/include

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-macos
          path: build/coverage
          if-no-files-found: error
